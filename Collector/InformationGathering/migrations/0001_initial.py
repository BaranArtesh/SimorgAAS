# Generated by Django 5.2 on 2025-08-03 08:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('host', models.GenericIPAddressField()),
                ('type', models.CharField(max_length=50)),
                ('is_local', models.BooleanField(default=False)),
                ('status', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ShodanInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField()),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('organization', models.CharField(blank=True, max_length=255, null=True)),
                ('isp', models.CharField(blank=True, max_length=255, null=True)),
                ('asn', models.CharField(blank=True, max_length=100, null=True)),
                ('os', models.CharField(blank=True, max_length=100, null=True)),
                ('hostnames', models.JSONField(blank=True, null=True)),
                ('domains', models.JSONField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, null=True)),
                ('last_update', models.CharField(blank=True, max_length=100, null=True)),
                ('vulnerabilities', models.JSONField(blank=True, null=True)),
                ('open_ports', models.TextField(blank=True, default='[]')),
                ('services', models.TextField(blank=True, default='[]')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('target', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shodan_info', to='InformationGathering.target')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectSonarData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset', models.CharField(max_length=50)),
                ('entry_count', models.IntegerField()),
                ('data', models.JSONField()),
                ('collected_at', models.DateTimeField(auto_now_add=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='InformationGathering.target')),
            ],
        ),
        migrations.CreateModel(
            name='NmapScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_date', models.DateTimeField(auto_now_add=True)),
                ('scan_type', models.CharField(choices=[('TCP', 'TCP Scan'), ('UDP', 'UDP Scan'), ('SYN', 'SYN Scan'), ('Full', 'Full Scan')], max_length=50)),
                ('status', models.CharField(choices=[('Success', 'Success'), ('Failed', 'Failed')], max_length=50)),
                ('scan_output', models.TextField(blank=True, null=True)),
                ('scan_duration', models.FloatField(blank=True, null=True)),
                ('scan_flags', models.JSONField(blank=True, null=True)),
                ('open_ports', models.JSONField(blank=True, null=True)),
                ('results', models.JSONField(blank=True, null=True)),
                ('host_os', models.CharField(blank=True, max_length=255, null=True)),
                ('os_detection_method', models.CharField(blank=True, max_length=100, null=True)),
                ('os_accuracy', models.IntegerField(blank=True, null=True)),
                ('is_vpn', models.BooleanField(default=False)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nmap_scans', to='InformationGathering.target')),
            ],
        ),
        migrations.CreateModel(
            name='IPInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('asn', models.CharField(blank=True, max_length=50, null=True)),
                ('asn_registry', models.CharField(blank=True, max_length=100, null=True)),
                ('asn_cidr', models.CharField(blank=True, max_length=100, null=True)),
                ('asn_country_code', models.CharField(blank=True, max_length=2, null=True)),
                ('asn_date', models.DateField(blank=True, null=True)),
                ('asn_description', models.TextField(blank=True, null=True)),
                ('network_name', models.CharField(blank=True, max_length=255, null=True)),
                ('network_handle', models.CharField(blank=True, max_length=255, null=True)),
                ('network_status', models.CharField(blank=True, max_length=50, null=True)),
                ('network_start_address', models.GenericIPAddressField(blank=True, null=True)),
                ('network_end_address', models.GenericIPAddressField(blank=True, null=True)),
                ('network_cidr', models.CharField(blank=True, max_length=100, null=True)),
                ('network_type', models.CharField(blank=True, max_length=100, null=True)),
                ('network_parent_handle', models.CharField(blank=True, max_length=50, null=True)),
                ('org_name', models.CharField(blank=True, max_length=255, null=True)),
                ('org_street', models.CharField(blank=True, max_length=255, null=True)),
                ('org_city', models.CharField(blank=True, max_length=100, null=True)),
                ('org_state', models.CharField(blank=True, max_length=100, null=True)),
                ('org_postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('org_country', models.CharField(blank=True, max_length=100, null=True)),
                ('abuse_contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('abuse_contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('abuse_contact_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('admin_contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('noc_contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('noc_contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('noc_contact_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('abuse_report_link', models.URLField(blank=True, null=True)),
                ('whois_info_link', models.URLField(blank=True, null=True)),
                ('terms_of_service_link', models.URLField(blank=True, null=True)),
                ('geofeed_link', models.URLField(blank=True, null=True)),
                ('network_ip_version', models.CharField(blank=True, max_length=10, null=True)),
                ('admin_contact_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ip_info', to='InformationGathering.target')),
            ],
        ),
        migrations.CreateModel(
            name='CensysInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('ip', models.GenericIPAddressField()),
                ('ip_int', models.BigIntegerField(blank=True, null=True)),
                ('raw_data', models.JSONField(blank=True, null=True)),
                ('services', models.JSONField(blank=True, null=True)),
                ('protocols', models.JSONField(blank=True, null=True)),
                ('tls_issuer', models.CharField(blank=True, max_length=255, null=True)),
                ('tls_subject', models.TextField(blank=True, null=True)),
                ('tls_not_before', models.DateTimeField(blank=True, null=True)),
                ('tls_not_after', models.DateTimeField(blank=True, null=True)),
                ('asn', models.IntegerField(blank=True, null=True)),
                ('asn_name', models.CharField(blank=True, max_length=255, null=True)),
                ('asn_description', models.TextField(blank=True, null=True)),
                ('asn_country_code', models.CharField(blank=True, max_length=2, null=True)),
                ('location_city', models.CharField(blank=True, max_length=100, null=True)),
                ('location_country', models.CharField(blank=True, max_length=100, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('domains', models.JSONField(blank=True, null=True)),
                ('hostnames', models.JSONField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, null=True)),
                ('vulnerabilities', models.JSONField(blank=True, null=True)),
                ('collection_status', models.CharField(default='success', max_length=50)),
                ('source', models.CharField(blank=True, default='censys', max_length=100)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='censys_scans', to='InformationGathering.target')),
            ],
        ),
        migrations.CreateModel(
            name='WhoisInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_name', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('registrar', models.CharField(blank=True, max_length=255, null=True)),
                ('whois_server', models.CharField(blank=True, max_length=255, null=True)),
                ('referral_url', models.URLField(blank=True, null=True)),
                ('updated_date', models.JSONField(blank=True, null=True)),
                ('creation_date', models.DateTimeField(blank=True, null=True)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('name_servers', models.JSONField(blank=True, null=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('emails', models.JSONField(blank=True, null=True)),
                ('dnssec', models.CharField(blank=True, max_length=50, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('org', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('registrant_postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('target', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='InformationGathering.target')),
            ],
        ),
        migrations.CreateModel(
            name='ZmapScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_date', models.DateTimeField(auto_now_add=True)),
                ('scan_type', models.CharField(default='TCP SYN', help_text='e.g., TCP SYN, ICMP Echo', max_length=50)),
                ('status', models.CharField(choices=[('Success', 'Success'), ('Failed', 'Failed')], default='Success', max_length=50)),
                ('scan_flags', models.JSONField(blank=True, help_text='Zmap CLI flags used during scan', null=True)),
                ('raw_output', models.TextField(blank=True, help_text='Raw Zmap output, if available', null=True)),
                ('duration', models.FloatField(blank=True, help_text='Scan duration in seconds', null=True)),
                ('open_ports', models.JSONField(blank=True, help_text='List of open ports detected', null=True)),
                ('responders', models.JSONField(blank=True, help_text='List of IPs that responded', null=True)),
                ('filtered_hosts', models.JSONField(blank=True, help_text='Hosts that were filtered or dropped', null=True)),
                ('total_targets', models.IntegerField(blank=True, null=True)),
                ('total_responded', models.IntegerField(blank=True, null=True)),
                ('vpn_detected', models.BooleanField(default=False)),
                ('scan_source', models.CharField(default='zmap', max_length=100)),
                ('notes', models.TextField(blank=True, null=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zmap_scans', to='InformationGathering.target')),
            ],
        ),
        migrations.CreateModel(
            name='ZoomEyeInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_date', models.DateTimeField(auto_now_add=True)),
                ('ip', models.GenericIPAddressField()),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('isp', models.CharField(blank=True, max_length=255, null=True)),
                ('asn', models.CharField(blank=True, max_length=100, null=True)),
                ('org', models.CharField(blank=True, max_length=255, null=True)),
                ('os', models.CharField(blank=True, max_length=100, null=True)),
                ('hostnames', models.JSONField(blank=True, null=True)),
                ('domains', models.JSONField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('open_ports', models.JSONField(blank=True, null=True)),
                ('services', models.JSONField(blank=True, null=True)),
                ('vulnerabilities', models.JSONField(blank=True, null=True)),
                ('raw_data', models.JSONField(blank=True, null=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zoomeye_scans', to='InformationGathering.target')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='target',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
